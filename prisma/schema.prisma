generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                        Int                        @id @default(autoincrement())
    email                     String                     @unique
    username                  String                     @unique
    password                  String?
    name                      String?
    active                    Boolean                    @default(false)
    createdAt                 DateTime                   @default(now())
    updatedAt                 DateTime                   @updatedAt
    activateTokens            ActivateToken[]
    sentFriendRequests        FriendRequest[]            @relation("from")
    receivedFriendRequests    FriendRequest[]            @relation("to")
    friend                    User[]                     @relation("friends")
    friendOf                  User[]                     @relation("friends") // can mostly be ignored
    ExternalFriend            ExternalFriend[]
    sentTransactions          Transaction[]              @relation("from")
    recievedTransactions      Transaction[]              @relation("to")
    tWhereUserIsOwed          Transaction[]              @relation("userWhoIsOwed")
    tWhereUserOwes            Transaction[]              @relation("userWhoOwes")
    externalTransactions      ExternalTransaction[]
    accountInfoChangeAttempts AccountInfoChangeAttempt[]
}

model Transaction {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    status    String   @default("pending") // "pending" | "accepted" | "declined"

    fromUserId Int
    toUserId   Int
    from       User @relation(fields: [fromUserId], references: [id], name: "from")
    to         User @relation(fields: [toUserId], references: [id], name: "to")

    userWhoOwesId Int
    userWhoOwes   User @relation(fields: [userWhoOwesId], references: [id], name: "userWhoOwes")

    userWhoIsOwedId Int
    userWhoIsOwed   User @relation(fields: [userWhoIsOwedId], references: [id], name: "userWhoIsOwed")

    amount        Float
    doesSenderOwe Boolean
    description   String
}

model ActivateToken {
    id          Int       @id @default(autoincrement())
    token       String    @unique
    activatedAt DateTime?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    user        User      @relation(fields: [userId], references: [id])
    userId      Int
}

model FriendRequest {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    status    String   @default("pending") // "pending" | "accepted" | "declined"

    fromUserId Int
    toUserId   Int
    from       User @relation(fields: [fromUserId], references: [id], name: "from")
    to         User @relation(fields: [toUserId], references: [id], name: "to")
}

model ExternalFriend {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])
    userId    Int

    name               String
    outstandingBalance Float  @default(0.0)

    externalTransactions ExternalTransaction[]
}

model ExternalTransaction {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())

    externalFriendId Int
    externalFriend   ExternalFriend @relation(fields: [externalFriendId], references: [id])

    userId Int
    user   User @relation(fields: [userId], references: [id])

    doesUserOwe Boolean
    amount      Float
    description String
}

model AccountInfoChangeAttempt {
    id                Int       @id @default(autoincrement())
    verificationToken String    @unique
    activatedAt       DateTime?
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt
    user              User      @relation(fields: [userId], references: [id])
    userId            Int

    newName         String
    newUsername     String
    newEmail        String
    newPasswordHash String
}
